package com.company;

public class Main{
    public static void main(String[] args){

        System.out.println(repeat("mice", 5));

        int[] a={10, 4, 1, 4, -10, -50, 32, 21};
        System.out.println(differenceMaxMin(a));

        int[] b={ 1, 2, 5,8};
        System.out.println(isAvgWhole(b));

        int[] c={3, 3, -2, 408, 3, 3};
        System.out.println(Arrays.toString(cumulativeSum(c)));

        System.out.println(getDecimalPlaces("32.77"));

        System.out.println(Fibonacci(7));
        System.out.println(isValid("853a7"));

        System.out.println(isStrangePair("mice","eicl"));

        System.out.println(isSuffix("arachnophobia", "-phobia"));
        System.out.println(isPrefix("automation", "auto-"));

        System.out.println(boxSeq(1));
    }


    public static  String repeat( String a, int repeats) {
        String repeat = " ";
        for (int i = 0; i < a.length(); i++) {
            for (int j = 0; j < repeats; j++) {
                repeat += a.charAt(i);
            }
        }
        return repeat;
    }
    public static int differenceMaxMin(int[] a) {
        int max = a[1];
        int min = a[1];
        for (int i = 0; i < a.length; i++) {
            if (a[i] > max) {
                max = a[i];
            }
            if (a[i] < min) {
                min = a[i];
            }
        }
        return (max - min);
    }
    public static boolean isAvgWhole( int[] a) {
        int sum = 0;
        for (int i = 0; i < a.length; i++) {
            sum += a[i];
        }
        if (sum % a.length == 0) {
            return (true);
        }
        return (false);
    }
    public static int[] cumulativeSum(int[] a) {
        int[] new_mass = new int[a.length];
        int sum = 0;
        for (int i = 0; i < a.length; i++) {
            sum += a[i];
            new_mass[i] = sum;
        }
        return (new_mass);
    }
    public static int[] cumulativeSum(int[] a) {
        int[] new_mass = new int[a.length];
        int sum = 0;
        for (int i = 0; i < a.length; i++) {
            sum += a[i];
            new_mass[i] = sum;
        }
        return (new_mass);
    }
    public static int getDecimalPlaces(String a) {
        double b=Double.parseDouble(a);
        b=b%1;
        b=b*10;
        b=Math.floor(b);
        int c=(int)b;
        return c;
    }
    public static int Fibonacci(int a) {
        int b=0;
        int c=1;
        int fib=0;
        for(int i=1;i<=a;i++){
            fib=b+c;
            b=c;
            c=fib;
        }
        return fib;
    }
    public static boolean isValid(String ind) {
        if (ind.length()!=5){
            return false;
        }
        try {
            int number = Integer.parseInt(ind);
            return true;
        }
        catch(Exception e) {
            return false;
        }
    }
    public static boolean isStrangePair(String a,String b) {
        if((a.charAt(0)==b.charAt(b.length()-1))&&(a.charAt(a.length()-1)==b.charAt(0))){
            return (true);
        }
        return (false);
    }
    public static boolean isSuffix(String word, String suf) {
        suf = suf.replace("-", "");//убираем -
        int raz = word.length() - suf.length();
        for (int i = raz; i < suf.length(); i++) {
            if (suf.charAt(i - raz) == word.charAt(i)) {
                continue;
            }
            else {
                return false;
            }
        }
        return true;
    }
    public static boolean isPrefix(String word, String pref) {
        pref = pref.replace("-", "");
        for (int i = 0; i < pref.length(); i++) {
            ;
            if (pref.charAt(i) == word.charAt(i)) {
                continue;
            } else {
                return false;
            }
        }
        return true;
    }

    public static int boxSeq(int step) {
    if (step %  2  != 0) {
            return step+ 2;
        }
        return step;

    }


}